/* eslint-disable @typescript-eslint/no-explicit-any */
import { PrismaClient } from "@prisma/client";
import { NextResponse, NextRequest } from "next/server";

const prisma = new PrismaClient();

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á ALT_TEXT ‚Üí Object
function parseAltText(text: string, index: number) {
  const match = text.match(
    /‡πÄ‡∏Ç‡πâ‡∏≤‡∏ö‡∏±‡∏ç‡∏ä‡∏µ (.+) ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (.+) ‡πÄ‡∏ß‡∏•‡∏≤ (.+) ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô ([\d,]+\.\d+)  ‡∏ö‡∏≤‡∏ó ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ([\d,]+\.\d+)  ‡∏ö‡∏≤‡∏ó/
  );
  if (!match) return null;

  return {
    transactionid: String(Date.now()) + index,
    bank_sender: match[1],
    amount: match[4].replace(/,/g, ""),
    status: "‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤",
    timestamp: String(Date.now()), // mock ‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô
    time: `${match[2]} ${match[3]}`,
  };
}

export async function POST(req: NextRequest) {
  try {
    const { xkey, account } = await req.json();
    const user = await prisma.line_Noti_API.findUnique({
      where: { account: account },
    });

    if (!user) {
      return NextResponse.json(
        { status: "failed", msg: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" },
        { status: 404 }
      );
    }

    if (user?.xkey !== xkey) {
      return NextResponse.json(
        { status: "failed", msg: "xkey ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" },
        { status: 404 }
      );
    }

    if (!user || !user.points || user.points.toNumber() < 0.5) {
      return NextResponse.json(
        { status: "failed", msg: "‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠" },
        { status: 400 }
      );
    }

    if (!account || !xkey) {
      return NextResponse.json(
        { status: "failed", msg: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" },
        { status: 400 }
      );
    }

    if (!user.hmac || !user.line_access_token || !user.body_token) {
      return NextResponse.json(
        { status: "failed", msg: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" },
        { status: 400 }
      );
    }

    // üîπ fetch ‡∏à‡∏≤‡∏Å LINE API
    const response = await fetch(
      "https://line-chrome-gw.line-apps.com/api/talk/thrift/Talk/TalkService/getRecentMessagesV2",
      {
        method: "POST",
        headers: {
          accept: "application/json, text/plain, */*",
          "content-type": "application/json",
          "x-hmac": user.hmac,
          "x-lal": "en_US",
          "x-line-access": user.line_access_token,
          "x-line-chrome-version": "3.7.1",
        },
        body: JSON.stringify([user.body_token, 50]),
      }
    );

    const json = await response.json();
    console.log(user);
    console.log(json);

    // üîπ ‡∏î‡∏∂‡∏á ALT_TEXT ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤"
    const result = (json.data ?? [])
      .map((item: any) => item.contentMetadata?.ALT_TEXT)
      .filter((text: string) => text && text.startsWith("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤"));

    const parsed = result
      .map((t: string, i: number) => parseAltText(t, i))
      .filter(Boolean);

    if (parsed.length === 0) {
      return NextResponse.json(
        { status: "failed", msg: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤" },
        { status: 404 }
      );
    }

    await prisma.line_Noti_API.update({
      where: { id: user.id },
      data: {
        points: {
          decrement: 0.5, // ‡∏•‡∏î‡∏•‡∏á 0.5
        },
      },
    });

    return NextResponse.json({ status: "success", data: parsed });
  } catch (error) {
    console.error(error);
    return NextResponse.json(
      { status: "error", message: "Failed to fetch ALT_TEXT transactions" },
      { status: 500 }
    );
  }
}
